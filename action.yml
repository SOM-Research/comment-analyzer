name: 'Comment analyzer'
description: 'Analyze and handle comments in issues, pull requests, and discussions, and perform actions in the repository based on the analysis'
author: 'CobosDS'
inputs:
  github_token:
    description: 'GitHub token'
    required: true
  server_url:
    description: 'URL of the analysis server'
    required: true
  sendinblue_api_key:
    description: 'Sendinblue API key'
    required: true
  email_from:
    description: 'Sender email address'
    required: true
  email_to:
    description: 'Recipient email address'
    required: true
  bot_user:
    description: 'Bot GitHub username'
    required: true
  bot_token:
    description: 'Bot GitHub token'
    required: true
  comment_json:
    description: 'Path to comment JSON file'
    required: true
  flags:
    description: 'Flags from the analysis'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Analyze and act on comment
      shell: bash
      run: |
        curl -X POST "${{ inputs.server_url }}" -H "Content-Type: application/json" \
             -d @${{ inputs.comment_json }} \
             -o data/comment_analysis_result.json
        cat data/comment_analysis_result.json

        # Extraer variables del JSON de an√°lisis
        classification=$(jq -r '.analysis.classification' data/comment_analysis_result.json)
        response_comment=$(jq -r '.response_comment' data/comment_analysis_result.json)

        # Extraer variables del JSON del comentario
        comment_data=$(cat ${{ inputs.comment_json }})
        event_type=$(echo $comment_data | jq -r '.data.event_type')
        event_number=$(echo $comment_data | jq -r '.data.event_number')
        comment_id=$(echo $comment_data | jq -r '.data.comment_id')
        repository_name=$(echo $comment_data | jq -r '.data.repository_name')
        bot_token="${{ inputs.bot_token }}"

        echo "Classification: $classification"

        if [ "$classification" == "positive" ]; then
          if [[ "$event_type" == "issue" ]]; then
            curl -X POST -H "Authorization: token $bot_token" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/$repository_name/issues/$event_number/comments \
                 -d '{"body":"'"$response_comment"'"}'
          elif [[ "$event_type" == "pull_request" ]]; then
            curl -X POST -H "Authorization: token $bot_token" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/$repository_name/pulls/$event_number/comments \
                 -d '{"body":"'"$response_comment"'"}'
          elif [[ "$event_type" == "discussion" ]]; then
            curl -X POST -H "Authorization: token $bot_token" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/$repository_name/discussions/$event_number/comments \
                 -d '{"body":"'"$response_comment"'"}'
          fi
        elif [ "$classification" == "negative" ]; then
          if [[ "$event_type" == "issue" ]]; then
            curl -X DELETE -H "Authorization: token $bot_token" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/$repository_name/issues/comments/$comment_id
          elif [[ "$event_type" == "pull_request" ]]; then
            curl -X DELETE -H "Authorization: token $bot_token" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/$repository_name/pulls/comments/$comment_id
          elif [[ "$event_type" == "discussion" ]]; then
            curl -X DELETE -H "Authorization: token $bot_token" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/$repository_name/discussions/comments/$comment_id
          fi
        fi

    - name: Send email notification
      shell: bash
      run: |
        classification=$(jq -r '.analysis.classification' data/comment_analysis_result.json)
        email_body=""

        if [ "$classification" == "positive" ]; then
          email_body="A positive action was taken. Details: $(cat ${{ inputs.comment_json }})"
        elif [ "$classification" == "negative" ]; then
          email_body="A negative action was taken. Details: $(cat ${{ inputs.comment_json }})"
        fi

        email_json=$(jq -n --arg from_name "GitHub Actions" \
                          --arg from_email "${{ inputs.email_from }}" \
                          --arg to_email "${{ inputs.email_to }}" \
                          --arg subject "GitHub Actions Notification" \
                          --arg htmlContent "<html><head></head><body><p>${email_body}</p></body></html>" \
                          '{sender: {name: $from_name, email: $from_email}, to: [{email: $to_email, name: "Recipient"}], subject: $subject, htmlContent: $htmlContent}')

        echo "$email_json" | curl -X POST "https://api.brevo.com/v3/smtp/email" \
          -H "accept: application/json" \
          -H "api-key: ${{ inputs.sendinblue_api_key }}" \
          -H "Content-Type: application/json" \
          -d @-
